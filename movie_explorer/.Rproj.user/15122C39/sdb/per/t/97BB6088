{
    "collab_server" : "",
    "contents" : "library(ggvis)\nlibrary(dplyr)\nif (FALSE) {\n  library(RSQLite)\n  library(dbplyr)\n}\n\n# Set up handles to database tables on app start\ndb <- src_sqlite(\"movies.db\")\nomdb <- tbl(db, \"omdb\")\ntomatoes <- tbl(db, \"tomatoes\")\n\n# Join tables, filtering out those with <10 reviews, and select specified columns\nall_movies <- inner_join(omdb, tomatoes, by = \"ID\") %>%\n  filter(Reviews >= 10) %>%\n  select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,\n         Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,\n         Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,\n         BoxOffice, Production, Cast)\n\n\nfunction(input, output, session) {\n  \n  # Filter the movies, returning a data frame\n  movies <- reactive({\n    # Due to dplyr issue #318, we need temp variables for input values\n    reviews <- input$reviews\n    oscars <- input$oscars\n    minyear <- input$year[1]\n    maxyear <- input$year[2]\n    minboxoffice <- input$boxoffice[1] * 1e6\n    maxboxoffice <- input$boxoffice[2] * 1e6\n    \n    # Apply filters\n    m <- all_movies %>%\n      filter(\n        Reviews >= reviews,\n        Oscars >= oscars,\n        Year >= minyear,\n        Year <= maxyear,\n        BoxOffice >= minboxoffice,\n        BoxOffice <= maxboxoffice\n      ) %>%\n      arrange(Oscars)\n    \n    # Optional: filter by genre\n    if (input$genre != \"All\") {\n      genre <- paste0(\"%\", input$genre, \"%\")\n      m <- m %>% filter(Genre %like% genre)\n    }\n    # Optional: filter by director\n    if (!is.null(input$director) && input$director != \"\") {\n      director <- paste0(\"%\", input$director, \"%\")\n      m <- m %>% filter(Director %like% director)\n    }\n    # Optional: filter by cast member\n    if (!is.null(input$cast) && input$cast != \"\") {\n      cast <- paste0(\"%\", input$cast, \"%\")\n      m <- m %>% filter(Cast %like% cast)\n    }\n    \n    \n    m <- as.data.frame(m)\n    \n    # Add column which says whether the movie won any Oscars\n    # Be a little careful in case we have a zero-row data frame\n    m$has_oscar <- character(nrow(m))\n    m$has_oscar[m$Oscars == 0] <- \"No\"\n    m$has_oscar[m$Oscars >= 1] <- \"Yes\"\n    m\n  })\n  \n  # Function for generating tooltip text\n  movie_tooltip <- function(x) {\n    if (is.null(x)) return(NULL)\n    if (is.null(x$ID)) return(NULL)\n    \n    # Pick out the movie with this ID\n    all_movies <- isolate(movies())\n    movie <- all_movies[all_movies$ID == x$ID, ]\n    \n    paste0(\"<b>\", movie$Title, \"</b><br>\",\n           movie$Year, \"<br>\",\n           \"$\", format(movie$BoxOffice, big.mark = \",\", scientific = FALSE)\n    )\n  }\n  \n  # A reactive expression with the ggvis plot\n  vis <- reactive({\n    # Lables for axes\n    xvar_name <- names(axis_vars)[axis_vars == input$xvar]\n    yvar_name <- names(axis_vars)[axis_vars == input$yvar]\n    \n    # Normally we could do something like props(x = ~BoxOffice, y = ~Reviews),\n    # but since the inputs are strings, we need to do a little more work.\n    xvar <- prop(\"x\", as.symbol(input$xvar))\n    yvar <- prop(\"y\", as.symbol(input$yvar))\n    \n    movies %>%\n      ggvis(x = xvar, y = yvar) %>%\n      layer_points(size := 50, size.hover := 200,\n                   fillOpacity := 0.2, fillOpacity.hover := 0.5,\n                   stroke = ~has_oscar, key := ~ID) %>%\n      add_tooltip(movie_tooltip, \"hover\") %>%\n      add_axis(\"x\", title = xvar_name) %>%\n      add_axis(\"y\", title = yvar_name) %>%\n      add_legend(\"stroke\", title = \"Won Oscar\", values = c(\"Yes\", \"No\")) %>%\n      scale_nominal(\"stroke\", domain = c(\"Yes\", \"No\"),\n                    range = c(\"orange\", \"#aaa\")) %>%\n      set_options(width = 500, height = 500)\n  })\n  \n  vis %>% bind_shiny(\"plot1\")\n  \n  output$n_movies <- renderText({ nrow(movies()) })\n}",
    "created" : 1551721462550.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4035585484",
    "id" : "97BB6088",
    "lastKnownWriteTime" : 1551724498,
    "last_content_update" : 1551724498556,
    "path" : "~/Desktop/R shiny/movie_explorer/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}